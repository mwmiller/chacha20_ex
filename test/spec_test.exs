defmodule SpecTest do
  use ExUnit.Case
  doctest Chacha20
  import Chacha20
  import VectorHelper

  @moduledoc """

  Test vectors from the specification RFC:

  https://tools.ietf.org/html/rfc7539

  """

  test "quarterround" do
    assert quarterround([0x11111111, 0x01020304, 0x9B8D6F43, 0x01234567]) == [
             0xEA2A92F4,
             0xCB1CF8CE,
             0x4581472E,
             0x5881C4BB
           ]
  end

  test "expand" do
    k =
      <<0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31>>

    n = <<0, 0, 0, 9, 0, 0, 0, 74, 0, 0, 0, 0>>
    b = 1

    assert expand(k, n, b) == [
             1_634_760_805,
             857_760_878,
             2_036_477_234,
             1_797_285_236,
             50_462_976,
             117_835_012,
             185_207_048,
             252_579_084,
             319_951_120,
             387_323_156,
             454_695_192,
             522_067_228,
             1,
             150_994_944,
             1_241_513_984,
             0
           ]
  end

  test "block" do
    k =
      <<0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31>>

    n = <<0, 0, 0, 9, 0, 0, 0, 74, 0, 0, 0, 0>>
    b = 1

    assert block(k, n, b) ==
             <<16, 241, 231, 228, 209, 59, 89, 21, 80, 15, 221, 31, 163, 32, 113, 196, 199, 209,
               244, 199, 51, 192, 104, 3, 4, 34, 170, 154, 195, 212, 108, 78, 210, 130, 100, 70,
               7, 159, 170, 9, 20, 194, 215, 5, 217, 139, 2, 162, 181, 18, 156, 209, 222, 22, 78,
               185, 203, 208, 131, 232, 162, 80, 60, 78>>
  end

  test "block vector #1" do
    k =
      from_hex("""
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      """)

    n = from_hex("00 00 00 00 00 00 00 00 00 00 00 00")
    b = 0

    result =
      from_hex("""
        76 b8 e0 ad a0 f1 3d 90 40 5d 6a e5 53 86 bd 28
        bd d2 19 b8 a0 8d ed 1a a8 36 ef cc 8b 77 0d c7
        da 41 59 7c 51 57 48 8d 77 24 e0 3f b8 d8 4a 37
        6a 43 b8 f4 15 18 a1 1c c3 87 b6 69 b2 ee 65 86
      """)

    assert block(k, n, b) == result
  end

  test "block vector #2" do
    k =
      from_hex("""
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      """)

    n = from_hex("00 00 00 00 00 00 00 00 00 00 00 00")
    b = 1

    result =
      from_hex("""
        9f 07 e7 be 55 51 38 7a 98 ba 97 7c 73 2d 08 0d
        cb 0f 29 a0 48 e3 65 69 12 c6 53 3e 32 ee 7a ed
        29 b7 21 76 9c e6 4e 43 d5 71 33 b0 74 d8 39 d5
        31 ed 1f 28 51 0a fb 45 ac e1 0a 1f 4b 79 4d 6f
      """)

    assert block(k, n, b) == result
  end

  test "block vector #3" do
    k =
      from_hex("""
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
      """)

    n = from_hex("00 00 00 00 00 00 00 00 00 00 00 00")
    b = 1

    result =
      from_hex("""
        3a eb 52 24 ec f8 49 92 9b 9d 82 8d b1 ce d4 dd
        83 20 25 e8 01 8b 81 60 b8 22 84 f3 c9 49 aa 5a
        8e ca 00 bb b4 a7 3b da d1 92 b5 c4 2f 73 f2 fd
        4e 27 36 44 c8 b3 61 25 a6 4a dd eb 00 6c 13 a0
      """)

    assert block(k, n, b) == result
  end

  test "block vector #4" do
    k =
      from_hex("""
        00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      """)

    n = from_hex("00 00 00 00 00 00 00 00 00 00 00 00")
    b = 2

    result =
      from_hex("""
        72 d5 4d fb f1 2e c4 4b 36 26 92 df 94 13 7f 32
        8f ea 8d a7 39 90 26 5e c1 bb be a1 ae 9a f0 ca
        13 b2 5a a2 6c b4 a6 48 cb 9b 9d 1b e6 5b 2c 09
        24 a6 6c 54 d5 45 ec 1b 73 74 f4 87 2e 99 f0 96
      """)

    assert block(k, n, b) == result
  end

  test "block vector #5" do
    k =
      from_hex("""
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      """)

    n = from_hex("00 00 00 00 00 00 00 00 00 00 00 02")
    b = 0

    result =
      from_hex("""
        c2 c6 4d 37 8c d5 36 37 4a e2 04 b9 ef 93 3f cd
        1a 8b 22 88 b3 df a4 96 72 ab 76 5b 54 ee 27 c7
        8a 97 0e 0e 95 5c 14 f3 a8 8e 74 1b 97 c2 86 f7
        5f 8f c2 99 e8 14 83 62 fa 19 8a 39 53 1b ed 6d
      """)

    assert block(k, n, b) == result
  end

  test "crypt" do
    k =
      <<0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31>>

    n = <<0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0>>

    m =
      "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."

    assert expand(k, n, 1) == [
             1_634_760_805,
             857_760_878,
             2_036_477_234,
             1_797_285_236,
             50_462_976,
             117_835_012,
             185_207_048,
             252_579_084,
             319_951_120,
             387_323_156,
             454_695_192,
             522_067_228,
             1,
             0,
             1_241_513_984,
             0
           ]

    assert expand(k, n, 2) == [
             1_634_760_805,
             857_760_878,
             2_036_477_234,
             1_797_285_236,
             50_462_976,
             117_835_012,
             185_207_048,
             252_579_084,
             319_951_120,
             387_323_156,
             454_695_192,
             522_067_228,
             2,
             0,
             1_241_513_984,
             0
           ]

    assert crypt(m, k, n, 1) ==
             <<110, 46, 53, 154, 37, 104, 249, 128, 65, 186, 7, 40, 221, 13, 105, 129, 233, 126,
               122, 236, 29, 67, 96, 194, 10, 39, 175, 204, 253, 159, 174, 11, 249, 27, 101, 197,
               82, 71, 51, 171, 143, 89, 61, 171, 205, 98, 179, 87, 22, 57, 214, 36, 230, 81, 82,
               171, 143, 83, 12, 53, 159, 8, 97, 216, 7, 202, 13, 191, 80, 13, 106, 97, 86, 163,
               142, 8, 138, 34, 182, 94, 82, 188, 81, 77, 22, 204, 248, 6, 129, 140, 233, 26, 183,
               121, 55, 54, 90, 249, 11, 191, 116, 163, 91, 230, 180, 11, 142, 237, 242, 120, 94,
               66, 135, 77>>
  end

  test "crypt vector #1" do
    k =
      from_hex("""
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      """)

    n = from_hex("00 00 00 00 00 00 00 00 00 00 00 00")

    m =
      from_hex("""
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      """)

    c = 0

    result =
      from_hex("""
        76 b8 e0 ad a0 f1 3d 90 40 5d 6a e5 53 86 bd 28
        bd d2 19 b8 a0 8d ed 1a a8 36 ef cc 8b 77 0d c7
        da 41 59 7c 51 57 48 8d 77 24 e0 3f b8 d8 4a 37
        6a 43 b8 f4 15 18 a1 1c c3 87 b6 69 b2 ee 65 86
      """)

    assert crypt(m, k, n, c) == result
  end

  test "crypt vector #2" do
    k =
      from_hex("""
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
      """)

    n = from_hex("00 00 00 00 00 00 00 00 00 00 00 02")

    m =
      from_hex("""
        41 6e 79 20 73 75 62 6d 69 73 73 69 6f 6e 20 74
        6f 20 74 68 65 20 49 45 54 46 20 69 6e 74 65 6e
        64 65 64 20 62 79 20 74 68 65 20 43 6f 6e 74 72
        69 62 75 74 6f 72 20 66 6f 72 20 70 75 62 6c 69
        63 61 74 69 6f 6e 20 61 73 20 61 6c 6c 20 6f 72
        20 70 61 72 74 20 6f 66 20 61 6e 20 49 45 54 46
        20 49 6e 74 65 72 6e 65 74 2d 44 72 61 66 74 20
        6f 72 20 52 46 43 20 61 6e 64 20 61 6e 79 20 73
        74 61 74 65 6d 65 6e 74 20 6d 61 64 65 20 77 69
        74 68 69 6e 20 74 68 65 20 63 6f 6e 74 65 78 74
        20 6f 66 20 61 6e 20 49 45 54 46 20 61 63 74 69
        76 69 74 79 20 69 73 20 63 6f 6e 73 69 64 65 72
        65 64 20 61 6e 20 22 49 45 54 46 20 43 6f 6e 74
        72 69 62 75 74 69 6f 6e 22 2e 20 53 75 63 68 20
        73 74 61 74 65 6d 65 6e 74 73 20 69 6e 63 6c 75
        64 65 20 6f 72 61 6c 20 73 74 61 74 65 6d 65 6e
        74 73 20 69 6e 20 49 45 54 46 20 73 65 73 73 69
        6f 6e 73 2c 20 61 73 20 77 65 6c 6c 20 61 73 20
        77 72 69 74 74 65 6e 20 61 6e 64 20 65 6c 65 63
        74 72 6f 6e 69 63 20 63 6f 6d 6d 75 6e 69 63 61
        74 69 6f 6e 73 20 6d 61 64 65 20 61 74 20 61 6e
        79 20 74 69 6d 65 20 6f 72 20 70 6c 61 63 65 2c
        20 77 68 69 63 68 20 61 72 65 20 61 64 64 72 65
        73 73 65 64 20 74 6f
      """)

    c = 1

    result =
      from_hex("""
        a3 fb f0 7d f3 fa 2f de 4f 37 6c a2 3e 82 73 70
        41 60 5d 9f 4f 4f 57 bd 8c ff 2c 1d 4b 79 55 ec
        2a 97 94 8b d3 72 29 15 c8 f3 d3 37 f7 d3 70 05
        0e 9e 96 d6 47 b7 c3 9f 56 e0 31 ca 5e b6 25 0d
        40 42 e0 27 85 ec ec fa 4b 4b b5 e8 ea d0 44 0e
        20 b6 e8 db 09 d8 81 a7 c6 13 2f 42 0e 52 79 50
        42 bd fa 77 73 d8 a9 05 14 47 b3 29 1c e1 41 1c
        68 04 65 55 2a a6 c4 05 b7 76 4d 5e 87 be a8 5a
        d0 0f 84 49 ed 8f 72 d0 d6 62 ab 05 26 91 ca 66
        42 4b c8 6d 2d f8 0e a4 1f 43 ab f9 37 d3 25 9d
        c4 b2 d0 df b4 8a 6c 91 39 dd d7 f7 69 66 e9 28
        e6 35 55 3b a7 6c 5c 87 9d 7b 35 d4 9e b2 e6 2b
        08 71 cd ac 63 89 39 e2 5e 8a 1e 0e f9 d5 28 0f
        a8 ca 32 8b 35 1c 3c 76 59 89 cb cf 3d aa 8b 6c
        cc 3a af 9f 39 79 c9 2b 37 20 fc 88 dc 95 ed 84
        a1 be 05 9c 64 99 b9 fd a2 36 e7 e8 18 b0 4b 0b
        c3 9c 1e 87 6b 19 3b fe 55 69 75 3f 88 12 8c c0
        8a aa 9b 63 d1 a1 6f 80 ef 25 54 d7 18 9c 41 1f
        58 69 ca 52 c5 b8 3f a3 6f f2 16 b9 c1 d3 00 62
        be bc fd 2d c5 bc e0 91 19 34 fd a7 9a 86 f6 e6
        98 ce d7 59 c3 ff 9b 64 77 33 8f 3d a4 f9 cd 85
        14 ea 99 82 cc af b3 41 b2 38 4d d9 02 f3 d1 ab
        7a c6 1d d2 9c 6f 21 ba 5b 86 2f 37 30 e3 7c fd
        c4 fd 80 6c 22 f2 21
      """)

    assert crypt(m, k, n, c) == result
  end

  test "crypt vector #3" do
    k =
      from_hex("""
        1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5 f0
        47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0
      """)

    n = from_hex("00 00 00 00 00 00 00 00 00 00 00 02")

    m =
      from_hex("""
        27 54 77 61 73 20 62 72 69 6c 6c 69 67 2c 20 61
        6e 64 20 74 68 65 20 73 6c 69 74 68 79 20 74 6f
        76 65 73 0a 44 69 64 20 67 79 72 65 20 61 6e 64
        20 67 69 6d 62 6c 65 20 69 6e 20 74 68 65 20 77
        61 62 65 3a 0a 41 6c 6c 20 6d 69 6d 73 79 20 77
        65 72 65 20 74 68 65 20 62 6f 72 6f 67 6f 76 65
        73 2c 0a 41 6e 64 20 74 68 65 20 6d 6f 6d 65 20
        72 61 74 68 73 20 6f 75 74 67 72 61 62 65 2e
      """)

    c = 42

    result =
      from_hex("""
        62 e6 34 7f 95 ed 87 a4 5f fa e7 42 6f 27 a1 df
        5f b6 91 10 04 4c 0d 73 11 8e ff a9 5b 01 e5 cf
        16 6d 3d f2 d7 21 ca f9 b2 1e 5f b1 4c 61 68 71
        fd 84 c5 4f 9d 65 b2 83 19 6c 7f e4 f6 05 53 eb
        f3 9c 64 02 c4 22 34 e3 2a 35 6b 3e 76 43 12 a6
        1a 55 32 05 57 16 ea d6 96 25 68 f8 7d 3f 3f 77
        04 c6 a8 d1 bc d1 bf 4d 50 d6 15 4b 6d a7 31 b1
        87 b5 8d fd 72 8a fa 36 75 7a 79 7a c1 88 d1
      """)

    assert crypt(m, k, n, c) == result
  end
end
